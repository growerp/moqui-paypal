<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->


<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">

    <service verb="get" noun="Token">
        <in-parameters>
            <parameter name="paymentGatewayConfigId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token" type="String"/>
            <parameter name="resultSuccess" type="Boolean"/>
        </out-parameters>
        <actions>
            <entity-find-one entity-name="paypal.PaymentGatewayPaypal" value-field="info"/>
            <if condition="info.expiryDate &amp;&amp; (info.expiryDate &lt; ec.user.nowTimestamp)">
                <return error="false"
                    message="token still valid : ${info.expiryDate?.toString()} no update"/></if>
            <script><![CDATA[
                import org.moqui.util.RestClient
                import org.moqui.context.ExecutionContext
                ExecutionContext ec = context.ec

                RestClient restClient = ec.service.rest()
                    .addHeader("Accept", "application/json")
                    .addHeader("Accept-Language", "en_US")
                    .method("POST")
                    .uri(info.transactionUrl + "/v1/oauth2/token")
                    .addBodyParameter("grant_type","client_credentials")
                    .basicAuth(info.clientId, info.secret)
                RestClient.RestResponse restResponse = restClient.call()
                resultMap = (Map) restResponse.jsonObject()
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    ec.logger.warn("Unsuccessful get token")
                    ec.logger.info("====return code: ${restResponse.statusCode}")     
                    resultSuccess = false
                }   else {
                    resultSuccess = true
                }
            ]]></script>
            <if condition="resultSuccess">
                <entity-find-one entity-name="paypal.PaymentGatewayPaypal"
                    value-field="info" for-update="true">
                    <field-map field-name="paymentGatewayConfigId" value="PaypalDemo"/>
                </entity-find-one>
                <set field="info.accessToken" from="resultMap.access_token"/>
                <set field="info.expiryDate" from="ec.user.nowTimestamp + resultMap.expires_in"/>
                <entity-update value-field="info"/>
            </if>
        </actions>
    </service>

    <service verb="perform" noun="PaypalApi">
        <in-parameters>
            <parameter name="paymentGatewayConfigId" required="true"/>
            <parameter name="path" required="true"/>
            <parameter name="intent" required="true"/>
            <parameter name="paymentId" required="true"/>
        </in-parameters>
        <out-parameters>
            <parameter name="paymentGatewayResponseId"/>
        </out-parameters>
        <actions>
            <service-call name="Paypal.PaymentServices.get#Token" in-map="context"/>
            <entity-find-one entity-name="paypal.PaymentGatewayPaypal" value-field="info">
                <field-map field-name="paymentGatewayConfigId" value="PaypalDemo"/>
            </entity-find-one>
            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <set field="jsonString" from='["PayPal-Request-Id": paymentId, intent: intent, purchase_units: [[ amount: [currency_code: "USD",value: payment.amount]]]]'/>
            <script><![CDATA[
                import org.moqui.util.RestClient
                import org.moqui.context.ExecutionContext
                import groovy.json.JsonSlurper
                import groovy.json.JsonOutput

                ExecutionContext ec = context.ec
                RestClient restClient = ec.service.rest()
                    .method("POST")
                    .uri(info.transactionUrl + path)
                    .addHeader("Content-Type", "application/json")
                    .addHeader("Authorization","Bearer " + info.accessToken)
                    .jsonObject(jsonString)
                RestClient.RestResponse restResponse = restClient.call()
                ec.logger.info("=========restResponse: ${restResponse.text()}")
                resultMap = (Map) restResponse.jsonObject()
                ec.logger.info("=========resultMap: $resultMap")
                if (restResponse.statusCode < 200 || restResponse.statusCode >= 300) {
                    ec.logger.warn("Unsuccessful paypal request")
                    ec.logger.info("====return code: ${restResponse.statusCode}")     
                    resultSuccess = false
                }   else {
                    resultSuccess = true
                }
            ]]></script>
            <log message="=======${intent}=======${resultMap}"/>
            <!--if condition="resultSuccess">
                <else>

                </else>
            </if-->
            <set field="mapOperation" from="[AUTHORIZE: 'PgoAuthorize', CAPTURE: 'PgoCapture', RELEASE: 'PgoRelease', REFUND: 'PgoRefund']"/>
            <service-call name="create#mantle.account.method.PaymentGatewayResponse" out-map="context"
                    in-map="[
                        paymentGatewayConfigId: paymentGatewayConfigId,
                        paymentOperationEnumId: mapOperation[intent],
                        paymentId: payment.paymentId,
                        paymentMethodId: payment.paymentMethodId,
                        amount: payment.amount,
                        amountUomId: payment.amountUomId,
                        referenceNum: resultMap.id,
                        approvalCode:'',
                        responseCode: restResponse.statusCode,
                        reasonCode:'',
                        reasonMessage: '',
                        avsResult: '',
                        cvResult:'',
                        transactionDate: ec.user.nowTimestamp,
                        resultSuccess: resultSuccess ? 'Y' : 'N',
                        resultDeclined: resultSuccess ? 'N' : 'Y',
                        resultError: resultSuccess ? 'N' : 'Y',
                        resultBadExpire:'',
                        resultBadCardNumber: '',
                        resultNsf:''
                        ]"/>
        </actions>
    </service>

    <service verb="authorize" noun="Payment">
        <implements service="mantle.account.PaymentServices.authorize#Payment"/>
        <actions>
            <log message="====Paypal Authorize: $paymentGatewayConfigId"/>
            <service-call name="Paypal.PaymentServices.perform#PaypalApi" out-map="context"
                in-map="context + [
                path: '/v2/checkout/orders',
                intent: 'AUTHORIZE',
                paymentId: paymentId]"/>
        </actions>
    </service>

    <service verb="capture" noun="Payment">
        <implements service="mantle.account.PaymentServices.capture#Payment"/>
        <actions>
            <log message="====Paypal Capture $paymentGatewayConfigId "/>
            <service-call name="Paypal.PaymentServices.perform#PaypalApi" out-map="context"
                in-map="context + [
                    path: '/v2/checkout/orders',
                    intent: 'CAPTURE',
                    paymentId: paymentId]"/>
        </actions>
    </service>

    <service verb="release" noun="Payment">
        <implements service="mantle.account.PaymentServices.release#Payment"/>
        <actions>
            <log message="===Paypal release"/>
            <service-call name="Paypal.PaymentServices.perform#PaypalApi" out-map="context"
                in-map="[
                intent: 'RELEASE',
                paymentId: paymentId]"/>
        </actions>
    </service>

    <service verb="refund" noun="Payment">
        <implements service="mantle.account.PaymentServices.refund#Payment"/>
        <actions>
            <log message="====Paypal refund"/>
            <service-call name="Paypal.PaymentServices.perform#PaypalApi" out-map="context"
                in-map="[
                intent: 'REFUND',
                paymentId: paymentId]"/>
        </actions>
    </service>

    <service verb="get" noun="GatewayInfo">
        <in-parameters><parameter name="paymentGatewayConfigId" required="true"/></in-parameters>
        <out-parameters><parameter name="gatewayInfoMap" type="Map"/></out-parameters>
        <actions>
            <log message="====paypal get#GatewayInfo"/>
            <return/>

            <entity-find-one entity-name="Paypal.PaymentGatewayPaypal" value-field="pgan"/>
            <set field="gatewayInfoMap" from="[x_login:pgan.login, x_tran_key:pgan.tranKey,
                    x_version:pgan.apiVersion, x_duplicate_window:pgan.duplicateWindow,
                    x_test_request:pgan.testRequest, x_delim_data:'TRUE', x_delim_char:'|', x_relay_response:'FALSE',
                    x_email_customer:pgan.emailCustomer, x_email_merchant:pgan.emailMerchant]"/>
            <!-- NOTE: not setting x_encap_char, should not be needed with pipe delimeter -->
            <!-- handle these later: x_cpversion:pgan.cpVersion, x_market_type:pgan.cpMarketType, x_device_type:pgan.cpDeviceType,  -->
        </actions>
    </service>
    <service verb="get" noun="PaymentGatewayInfo">
        <in-parameters><parameter name="paymentId" required="true"/></in-parameters>
        <out-parameters><parameter name="paymentInfoMap" type="Map"/></out-parameters>
        <actions>
            <log message="====paypal get#PaymentGatewayInfo"/>
            <return/>

            <entity-find-one entity-name="mantle.account.payment.Payment" value-field="payment"/>
            <set field="creditCard" from="payment.'mantle.account.method.CreditCard'"/>
            <if condition="!creditCard"><return error="true" message="Cannot not process payment [${paymentId}], not a Credit Card payment."/></if>
            <set field="paymentMethod" from="payment.'mantle.account.method.PaymentMethod'"/>

            <set field="postalAddress" from="paymentMethod.'mantle.party.contact.PostalAddress'"/>
            <if condition="!postalAddress"><return error="true" message="Cannot not process payment [${paymentId}], no Address associated with Credit Card [${paymentId}]."/></if>
            <set field="telecomNumber" from="paymentMethod.'mantle.party.contact.TelecomNumber'"/>
            <set field="phone" from="(telecomNumber?.countryCode ? (telecomNumber.countryCode + '-') : '') + (telecomNumber?.areaCode ? (telecomNumber.areaCode + '-') : '') + telecomNumber?.contactNumber"/>
            <set field="emailContactMech" from="paymentMethod.'Email#mantle.party.contact.ContactMech'"/>
            <set field="visit" from="payment.'moqui.server.Visit'"/>

            <!-- valid values for AIM are V (Visa), M (Master Card), A (AmEx), D (Discover), J (JCB), C (Diners Club);
                all type values have "Cct" and the 4th character (index 3) matches this pattern for existing records -->
            <set field="cardTypeCode" from="creditCard.creditCardTypeEnumId?.charAt(3)"/>
            <!-- TODO, future: support x_method:'ECHECK' for BankAccount records -->
            <set field="paymentInfoMap" from="[x_method:'CC',
                    x_amount:toPlainString(payment.amount), x_currency_code:payment.amountUomId,
                    x_card_num:creditCard.cardNumber, x_exp_date:creditCard.expireDate,
                    x_card_code:creditCard.cardSecurityCode, x_card_type:cardTypeCode,
                    x_first_name:paymentMethod.firstNameOnAccount, x_last_name:paymentMethod.lastNameOnAccount,
                    x_company:paymentMethod.companyNameOnAccount,
                    x_address:postalAddress.address1, x_city:postalAddress.city, x_state:postalAddress.stateProvinceGeoId,
                    x_zip:postalAddress.postalCode, x_country:postalAddress.countryGeoId, x_phone:phone,
                    x_email:emailContactMech?.infoString, x_cust_id:payment.fromPartyId, x_customer_ip:visit?.clientIpAddress,
                    x_invoice_num:payment.orderId]"/>
            <!-- TODO, future: maybe send x_description, x_po_num -->
        </actions>
    </service>
    <service verb="get" noun="AuthGatewayInfo">
        <in-parameters><parameter name="paymentId" required="true"/></in-parameters>
        <out-parameters><parameter name="authInfoMap" type="Map"/></out-parameters>
        <actions>
            <log message="====Paypal get#AuthGatewayInfo"/>
            <return/>
            <service-call name="mantle.account.PaymentServices.get#AuthorizePaymentGatewayResponse" in-map="context" out-map="context"/>
            <if condition="!paymentGatewayResponse"><return error="true" message="Could not find successful authorization for Payment ${paymentId}"/></if>

            <set field="authInfoMap" from="[x_trans_id:paymentGatewayResponse.referenceNum,
                    x_auth_code:paymentGatewayResponse.approvalCode]"/>
        </actions>
    </service>

</services>
